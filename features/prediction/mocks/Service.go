// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	prediction "AeroCast_API/features/prediction"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// NewCity provides a mock function with given fields: NewCity
func (_m *Service) NewCity(NewCity prediction.Prediction) (prediction.Prediction, error) {
	ret := _m.Called(NewCity)

	if len(ret) == 0 {
		panic("no return value specified for NewCity")
	}

	var r0 prediction.Prediction
	var r1 error
	if rf, ok := ret.Get(0).(func(prediction.Prediction) (prediction.Prediction, error)); ok {
		return rf(NewCity)
	}
	if rf, ok := ret.Get(0).(func(prediction.Prediction) prediction.Prediction); ok {
		r0 = rf(NewCity)
	} else {
		r0 = ret.Get(0).(prediction.Prediction)
	}

	if rf, ok := ret.Get(1).(func(prediction.Prediction) error); ok {
		r1 = rf(NewCity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCity provides a mock function with given fields: NameCity, NameCountry, page, limit
func (_m *Service) SearchCity(NameCity string, NameCountry string, page uint, limit uint) ([]prediction.Prediction, uint, error) {
	ret := _m.Called(NameCity, NameCountry, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for SearchCity")
	}

	var r0 []prediction.Prediction
	var r1 uint
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, uint, uint) ([]prediction.Prediction, uint, error)); ok {
		return rf(NameCity, NameCountry, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string, uint, uint) []prediction.Prediction); ok {
		r0 = rf(NameCity, NameCountry, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prediction.Prediction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, uint, uint) uint); ok {
		r1 = rf(NameCity, NameCountry, page, limit)
	} else {
		r1 = ret.Get(1).(uint)
	}

	if rf, ok := ret.Get(2).(func(string, string, uint, uint) error); ok {
		r2 = rf(NameCity, NameCountry, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
